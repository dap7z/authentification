{% extends 'templates/app.twig' %}

{% block content %}
	<div class="row">
		<div class="">
			<div class="panel panel-default">
				<div class="panel-heading">Liste des utilisateurs</div>
				<div class="panel-body" style="padding:0;">
					<form id="FormUsers" action="{{ path_for('users.postList') }}" method="post">
						
						<div><button type="button" id="BtnSave" type="submit" class="btn btn-primary btn-save-hidden" style="width:100%;">Sauvegarder les modifications</button></div>
						<div id="users-grid" data-ax5grid="users-grid" data-ax5grid-config="{}" style="height: 600px; width: 100%;"></div>
						<div style="padding: 10px;">
						    <button type="button" class="btn btn-default" data-grid-control="row-add">Ajouter un utilisateur</button>
							<button type="button" class="btn btn-default" data-grid-control="row-remove">Supprimer les utilisateurs selectionnés</button>
							<button type="button" class="btn btn-default" data-grid-control="excel-export" style="float:right;">Export Excel</button>
						</div>
						
						<div id="FormUsersData" class="form-group" style="display:none">
							<!-- hiddens inputs -->
							<input name="formjson" type="hidden" value="" />
						<div>
						
						{{ csrf.field | raw }}
						
					</form>
				</div>
				<script>
					$(document.body).ready(function () {
						
						
						$("#BtnSave").click(function(){
							//Cache bouton de validation pour eviter double click
							$("#BtnSave").addClass("btn-save-hidden");
							
							//Recuperation donnes utiles liste users :
							var d = {};
							d['modified'] = usersGrid.getList("modified");
							d['deleted'] = usersGrid.getList("deleted");
							//Les lignes nouvellement crees sont enregistres dans le tableau modified avec l'id 'new'
							//Attention si on fait getList sans parametre ou sur une liste qui n'existe pas, on recupere tout
							
							//Renseigne formulaire
							var formjson = $("#FormUsers").find("input[name='formjson']");
							var stringjson = JSON.stringify(d);
							formjson.val(stringjson);
							//console.log(formjson.val());
							
							//Envoi formulaire
							$("#FormUsers").submit();
							
							/*
								//ORG DEV: ajax query, probleme pour bien faire, il faudrait ajouter une route json (todo: interface json)
								//la reponse contenant les eventuels msg erreurs est en html, en plus on est obliger de faire un refresh
								d['csrf_name'] = $(document).find("input[name='csrf_name']").val();
								d['csrf_value'] = $(document).find("input[name='csrf_value']").val();	//champs csfr protection formulaire
								$.ajax({
									url : '{{ path_for('users.postList') }}',
									type : 'POST',
									data : d,
									success : function(response, statut){
										console.log(response);
										window.location.reload(true);
									}
								});
							*/
						});
						
						
						
						
						
						
						/* TODO: si on en utilise ailleur, creer un fichier js pour gerer les ax5grid (boutons et couleur sur cellule desactive qui ne sont pas implemente de base) */
						
						//creation objet grille ax5ui
						var usersGrid = new ax5.ui.grid({
							target: $('[data-ax5grid="users-grid"]'),
							showLineNumber: true,
							lineNumberColumnWidth: 30,
							sortable: true,
							multiSort: false,
							showRowSelector: true,
							rowSelectorColumnWidth: 27,
							columns: [
								{key: "email", label: "Email", align: "left", width: 250, editor: {type: "text", disabled: UsersGridCheckEvent}},
								/* {key: "changepassword", label: "Mot de passe", align: "center", editor: {type: "text", disabled: UsersGridCheckEvent}}, */
								{key: "name", label: "Nom", align: "left", width: 150, editor: {type: "text", disabled: UsersGridCheckEvent}},
								{key: "surname", label: "Prenom", align: "left", width: 150, editor: {type: "text", disabled: UsersGridCheckEvent}},
								{key: "telnumber", label: "Téléphone", editor: {type: "number", disabled: UsersGridCheckEvent}},
								{key: "is_admin", label: "Admin", align: "center", width: 66, editor: {
									type: "select", 
										config: {
											columnKeys: {optionValue: "V", optionText: "T"},
											options: [{V: "oui", T: "Oui"},{V: "non", T: "Non"}]
										}
									},
									disabled: UsersGridCheckEvent
								},
								{key: "created_at", label: "Date de création", align: "center", width: 150, styleClass: "coldisabled", editor: {type: "text", disabled: UsersGridCheckEvent}},
								{key: "updated_at", label: "Dernière modification", align: "center", width: 150, styleClass: "coldisabled", editor: {type: "text", disabled: UsersGridCheckEvent}}
								/* {key: "removeuser", label: "Supprimer l'utilisateur", align: "center", editor: {type: "text", disabled: UsersGridCheckEvent}}, */
								/* {key: "iduser", label: "", align: "right", editor: {type: "text", disabled: UsersGridCheckEvent}} */
							]
						});
						//les colonnes changepassword, removeuser, created_at, updated_at ne sont pas éditables (pour les autres: text,number,money,date)
						//20161218 attention ax5.ui.grid.editor.disabled attend une fonction, on peut pas juste lui passer true... exemple: {type: "text", disabled: function(){return true;} }
						
						
						//reglage hauteur de la grille
						var height = 600;	//minimum
						/*	//DESACTIVE: revoir fonction getAvailableHeight + on.window.resize
							var newHeight = getAvailableHeight();
							if(newHeight > height){
								height = newHeight;
							}
							console.log("verif usersGrid setHeight: " + height);
						*/
						usersGrid.setHeight(height);
						
						
						//Chargement data 
						UsersGridLoad(usersGrid);
						
						
						//Events panneau des boutons en bas :
						$('[data-grid-control]').click(function () {
							var nbElemSelected = usersGrid.getList("selected");
							nbElemSelected = nbElemSelected.length;
							switch (this.getAttribute("data-grid-control")) {
								case "row-add":
									d = {};
									d = UsersGridFormatRow(d);
									usersGrid.addRow(d);
									UsersGridTriggerChange();
								break;
								case "row-remove":
									if(nbElemSelected>0){
										usersGrid.deleteRow("selected");
										UsersGridTriggerChange();
									}else{
										var toast2 = new ax5.ui.toast();
										toast2.setConfig({
											containerPosition: "top-right"
										});//todo: 1seul obj toast app.twig
										toast2.push({
											theme: 'warning',
											msg: 'Vous devez cocher des lignes'
										});
									}
								break;
								case "excel-export":
									var txtdate = ax5.util.date(new Date(), {'return':'yyyyMMdd'});
									usersGrid.exportExcel("liste-utilisateurs-"+ txtdate +".xls");
							}
						});
						
					});
					
					
					
					
					
					/***********************
						DEBUT FONCTIONS
					***********************/
					
					
					function UsersGridLoad(grid){
						//====DATA====
						var usersData = {{ usersData|raw }};
						//Attention on est obliger de charger toutes les lignes en meme temps
						//Car ligne consideré comme modifié si utilisation de grid.addRow(d)
						var UsersDataFormated = [];
						$.each(usersData, function(){
							var f = UsersGridFormatRow(this);
							UsersDataFormated.push(f);
						});
						grid.setData(UsersDataFormated);
						//====STYLE====
						//on doit passer par les parametre d'initialisation de l'objet grid car celui ci est constament redessine
					}
					
					function UsersGridTriggerChange(){
						$("#BtnSave").removeClass("btn-save-hidden");
					}
					
					function UsersGridFormatRow(bddrow){
						//fonction qui formate les objet json en provenance de la bdd pour affichage dans ax5grid
						var internFonc = function(i){
							//fonction interne qui retourne valeur si definie sinon retourne chaine vide
							if(typeof(i)=='undefined') return '';
							else return i;
						}
						var gridrow = {};
						gridrow['email'] = internFonc(bddrow.email);
						gridrow['changepassword'] = '***********';
						gridrow['name'] = internFonc(bddrow.name),
						gridrow['surname'] = internFonc(bddrow.surname);
						gridrow['telnumber'] = internFonc(bddrow.telnumber);
						gridrow['is_admin'] = internFonc(bddrow.is_admin);
						gridrow['created_at'] = internFonc(bddrow.created_at);
						gridrow['updated_at'] = internFonc(bddrow.updated_at);
						gridrow['removeuser'] = '[ X ]';
						gridrow['iduser'] = internFonc(bddrow.id);
						if(gridrow['iduser'] == ''){
							gridrow['iduser'] = 'new';
						}
						gridrow['created_at'] = ax5.util.date(gridrow['created_at'], {'return':'dd/MM/yyyy  hh:mm'});
						gridrow['updated_at'] = ax5.util.date(gridrow['updated_at'], {'return':'dd/MM/yyyy  hh:mm'});
						return gridrow;
						//les donnes presentes ici mais non affiche dans la grille ax5ui sont tout de meme enregistres par ax5ui-grid
						//=> aussi bien voir mieux que des colonnes caches
					}
					
					
					function UsersGrid_RefColsDisabled(){
						/******* ATTENTION DOIT ETRE A JOUR : PENSER A MAINTENIR CETTE TABLE DE RELATION, ou voir ax5ui ************/
						//ORG: TEST BOUTONS DANS COLONNES
						var DISABLED_COLS = {
							"changepassword" : 1,
							"created_at" : 6,
							"updated_at" : 7,
							"removeuser" : 8,
							"iduser" : 9
						};
						//MINIMAL
						var DISABLED_COLS = {
							"created_at" : 5,
							"updated_at" : 6,
						};
						return DISABLED_COLS;
						//utilise dans: UsersGridCheckEvent, UsersGridCheckDisable
					}
					function UsersGrid_RefColsBtn(){
						var BUTTON_COLS = {
							"changepassword" : 1,
							"removeuser" : 8
						};
						return BUTTON_COLS;
					}
					
					

					function UsersGridCheckEvent(){
						//executee lors d'un double clic sur une case (via ax5.ui.grid.editor.disabled)
						//si on renvoi vrai, autorise la saisie sinon la case ne s'ouvre pas en ecriture
						var key = this.key;
						var clickOnDisable = UsersGridCheckDisable(key, "key");
						//console.log("this.key: "+ key +" clickOnDisable: "+ clickOnDisable);
						if(clickOnDisable == false){
							//utilisateur va rentrer dans la case
							UsersGridTriggerChange();
						}
						
						var refColsBtn = UsersGrid_RefColsBtn();
						var checkbtnindex = [];
						$.each(refColsBtn, function(k,v){
							checkbtnindex.push(v);
						});
						if(-1 != $.inArray(key, checkbtnindex)){
							console.log("lance event btn");
							UsersGridEventBtn(key);
							clickOnDisable = true;
						}
						
						return clickOnDisable;
					}
					
					
					function UsersGridEventBtn(key){
						//TEST CELLULE COMME UN BOUTON 
						console.log("============UsersGridEventBtn========="+key);
						ax5Grid.removeRow(1);
					}
					
					
					function UsersGridCheckDisable(input, mode, excludebtn){
						var refColsDisabled = UsersGrid_RefColsDisabled();
						var refColsColsBtn = UsersGrid_RefColsBtn();
						
						if(mode=='key'){
							input = refColsDisabled[input];
							mode = 'index';
						}
						//console.log('UsersGridCheckDisable => index:'+ input);
						
						var checkindex = [];
						$.each(refColsDisabled, function(k,v){
							checkindex.push(v); //v et pas this
						});
						//boutons ne doivent pas declenche ouverture de la cellule
						if(typeof(excludebtn)=='undefined' || excludebtn==false){
							console.log("exclude btn:"+ checkindex);
							$.each(refColsColsBtn, function(k,v){
								checkindex.push(v);
							});
						}
						
						var shouldBeDisabled = true;
						if(-1 == $.inArray(input, checkindex)){
							shouldBeDisabled = false;
						}
						//console.log('UsersGridCheckDisable => shouldBeDisabled:'+ shouldBeDisabled);
						
						return shouldBeDisabled;
					}
					
					
					
					
					
				</script>
			</div>
		</div>
	</div>
{% endblock %}